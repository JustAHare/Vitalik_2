import os
import pickle
import yaml
from loguru import logger
import torch

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open('config.yaml', 'r') as f:
    config = yaml.safe_load(f)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger.add(config['general']['training_log_path'], rotation="1 MB", level=config['general']['log_level'])


# ==========================
# üìù –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –§–ê–ô–õ–ê–ú–ò
# ==========================
def save_to_pickle(data, path):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ pickle-—Ñ–∞–π–ª.
    """
    try:
        with open(path, 'wb') as f:
            pickle.dump(data, f)
        logger.info(f"üíæ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {path}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")


def load_from_pickle(path):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ pickle-—Ñ–∞–π–ª–∞.
    """
    try:
        with open(path, 'rb') as f:
            data = pickle.load(f)
        logger.info(f"üì• –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ {path}")
        return data
    except FileNotFoundError:
        logger.warning(f"‚ö†Ô∏è –§–∞–π–ª {path} –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–≤—Ä–∞—â—ë–Ω –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫.")
        return []
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []


# ==========================
# üìä –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ú–ï–¢–†–ò–ö
# ==========================
def calculate_accuracy(predictions, targets):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π.
    """
    correct = (predictions == targets).sum().item()
    accuracy = correct / len(targets) if len(targets) > 0 else 0.0
    logger.info(f"üìä –¢–æ—á–Ω–æ—Å—Ç—å: {accuracy:.2f}")
    return accuracy


def calculate_loss(loss_fn, predictions, targets):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –ø–æ—Ç–µ—Ä–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Ç–µ—Ä—å.
    """
    loss = loss_fn(predictions, targets)
    logger.info(f"üìâ –ü–æ—Ç–µ—Ä–∏: {loss.item():.4f}")
    return loss.item()


# ==========================
# üíæ –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –ú–û–î–ï–õ–Ø–ú–ò
# ==========================
def save_model(model, path):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –º–æ–¥–µ–ª—å PyTorch.
    """
    try:
        torch.save(model.state_dict(), path)
        logger.info(f"üíæ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {path}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏: {e}")


def load_model(model, path, device='cpu'):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å PyTorch.
    """
    try:
        model.load_state_dict(torch.load(path, map_location=device))
        logger.info(f"üì• –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {path}")
    except FileNotFoundError:
        logger.warning(f"‚ö†Ô∏è –§–∞–π–ª –º–æ–¥–µ–ª–∏ {path} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")


# ==========================
# üìÇ –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –î–ò–†–ï–ö–¢–û–†–ò–ô
# ==========================
def ensure_directory_exists(path):
    """
    –°–æ–∑–¥–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.
    """
    if not os.path.exists(path):
        os.makedirs(path)
        logger.info(f"üìÇ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {path} –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞.")


# ==========================
# üöÄ –ü–†–ò–ú–ï–† –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø
# ==========================
if __name__ == '__main__':
    # –ü—Ä–∏–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    test_data = {'—Ü–≤–µ—Ç–∞': ['–∑–µ–ª–µ–Ω—ã–π', '—Å–∏–Ω–∏–π', '–∑–æ–ª–æ—Ç–æ–π']}
    save_to_pickle(test_data, './data/test_data.pkl')
    
    # –ü—Ä–∏–º–µ—Ä –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    loaded_data = load_from_pickle('./data/test_data.pkl')
    print("–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:", loaded_data)
    
    # –ü—Ä–∏–º–µ—Ä —Ä–∞—Å—á—ë—Ç–∞ –º–µ—Ç—Ä–∏–∫
    import torch.nn.functional as F
    predictions = torch.tensor([1, 0, 1])
    targets = torch.tensor([1, 0, 0])
    accuracy = calculate_accuracy(predictions, targets)
    loss = calculate_loss(F.mse_loss, predictions.float(), targets.float())
    
    # –ü—Ä–∏–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏
    import torch.nn as nn
    test_model = nn.Linear(3, 3)
    save_model(test_model, './models/test_model.pth')
    load_model(test_model, './models/test_model.pth')
    
    # –ü—Ä–∏–º–µ—Ä —Å–æ–∑–¥–∞–Ω–∏—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    ensure_directory_exists('./logs/test_logs')
