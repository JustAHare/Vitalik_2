import random
import yaml
from loguru import logger

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open('config.yaml', 'r') as f:
    config = yaml.safe_load(f)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger.add(config['general']['training_log_path'], rotation="1 MB", level=config['general']['log_level'])

class ColorEnvironment:
    """
    –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Å—Ä–µ–¥–∞ –¥–ª—è –∞–≥–µ–Ω—Ç–∞, –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—â–µ–≥–æ —Å –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏ —Ü–≤–µ—Ç–æ–≤.
    """
    def __init__(self):
        self.sequence = []  # –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        self.current_step = 0
        self.colors = ['–∑–µ–ª–µ–Ω—ã–π', '—Å–∏–Ω–∏–π', '–∑–æ–ª–æ—Ç–æ–π']
        self.reset()
    
    def reset(self):
        """
        –°–±—Ä–æ—Å —Å—Ä–µ–¥—ã –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
        """
        self.sequence = [random.choice(self.colors) for _ in range(3)]
        self.current_step = 0
        logger.info("üåü –°—Ä–µ–¥–∞ –±—ã–ª–∞ —Å–±—Ä–æ—à–µ–Ω–∞.")
        return self._get_state()
    
    def _get_state(self):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–µ–¥—ã.
        """
        return self.sequence[-3:]
    
    def step(self, action):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏–µ –∞–≥–µ–Ω—Ç–∞.
        
        Args:
            action (str): –î–µ–π—Å—Ç–≤–∏–µ –∞–≥–µ–Ω—Ç–∞ ('–∑–µ–ª–µ–Ω—ã–π', '—Å–∏–Ω–∏–π', '–∑–æ–ª–æ—Ç–æ–π').
        
        Returns:
            tuple: (—Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–∞–≥—Ä–∞–¥–∞, –∑–∞–≤–µ—Ä—à–µ–Ω–æ)
        """
        correct_color = random.choice(self.colors)  # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è "–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ" —Ü–≤–µ—Ç–∞
        self.sequence.append(correct_color)
        self.current_step += 1
        
        if action == correct_color:
            reward = 1  # –ê–≥–µ–Ω—Ç —É–≥–∞–¥–∞–ª —Ü–≤–µ—Ç
            logger.info(f"‚úÖ –ê–≥–µ–Ω—Ç —É–≥–∞–¥–∞–ª —Ü–≤–µ—Ç: {correct_color}")
        else:
            reward = -1  # –ê–≥–µ–Ω—Ç –æ—à–∏–±—Å—è
            logger.warning(f"‚ùå –ê–≥–µ–Ω—Ç –æ—à–∏–±—Å—è. –û–∂–∏–¥–∞–ª–æ—Å—å: {correct_color}, –ø–æ–ª—É—á–µ–Ω–æ: {action}")
        
        done = self.current_step >= config['training']['epochs']
        next_state = self._get_state()
        
        return next_state, reward, done
    
    def render(self):
        """
        –í–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ä–µ–¥—ã.
        """
        print(f"üü¢ –¢–µ–∫—É—â–∞—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {self.sequence[-3:]}")
