import yaml
import os
import pickle
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger(__name__)
logger.info("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ.")

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open('config.yaml', 'r', encoding='utf-8') as f:
    config = yaml.safe_load(f)

# –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º
TRAINING_DATA_PATH = config['paths']['training_data']

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
if not os.path.exists(os.path.dirname(TRAINING_DATA_PATH)):
    os.makedirs(os.path.dirname(TRAINING_DATA_PATH))

if not os.path.exists(TRAINING_DATA_PATH):
    with open(TRAINING_DATA_PATH, 'wb') as f:
        pickle.dump([], f)
        logger.info("–§–∞–π–ª training_data.pkl —Å–æ–∑–¥–∞–Ω.")

def load_training_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with open(TRAINING_DATA_PATH, 'rb') as f:
            data = pickle.load(f)
            logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(data)} –∑–∞–ø–∏—Å–µ–π –∏–∑ training_data.pkl.")
            return data
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return []

def save_training_data(data):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        with open(TRAINING_DATA_PATH, 'wb') as f:
            pickle.dump(data, f)
            logger.info("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

def manual_input_loop():
    """
    –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö.
    """
    training_data = load_training_data()
    MAX_DATA_SIZE = 100000  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
    print("\nüîµüü¢üü° –†–µ–∂–∏–º —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    print("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤ –≤—Ä—É—á–Ω—É—é (–∑–µ–ª–µ–Ω—ã–π, —Å–∏–Ω–∏–π, –∑–æ–ª–æ—Ç–æ–π).")
    print("–î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 'exit'. –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –≤–≤–µ–¥–∏—Ç–µ 'show'.\n")
    
    while True:
        user_input = input("–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç (–∑–µ–ª–µ–Ω—ã–π/—Å–∏–Ω–∏–π/–∑–æ–ª–æ—Ç–æ–π): ").strip().lower()
        
        if not user_input:
            print("‚ö†Ô∏è –ü—É—Å—Ç–æ–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            continue
        
        if user_input == 'exit':
            print("üö™ –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞.")
            break
        elif user_input == 'show':
            print("üìä –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:")
            for i, color in enumerate(training_data[-10:], 1):
                print(f"{i}. {color}")
            continue
        elif user_input not in ['–∑–µ–ª–µ–Ω—ã–π', '—Å–∏–Ω–∏–π', '–∑–æ–ª–æ—Ç–æ–π']:
            print("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥! –í–≤–µ–¥–∏—Ç–µ '–∑–µ–ª–µ–Ω—ã–π', '—Å–∏–Ω–∏–π' –∏–ª–∏ '–∑–æ–ª–æ—Ç–æ–π'.")
            continue
        
        # –õ–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–∞–Ω–Ω—ã—Ö
        if len(training_data) >= MAX_DATA_SIZE:
            print(f"‚ö†Ô∏è –ù–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ –≤ {MAX_DATA_SIZE} –∑–∞–ø–∏—Å–µ–π. –ù–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.")
            continue
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –æ–±—É—á–∞—é—â–∏–π –Ω–∞–±–æ—Ä
        training_data.append(user_input)
        save_training_data(training_data)
        
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω —Ü–≤–µ—Ç: {user_input}")
        print(f"‚úÖ –¶–≤–µ—Ç '{user_input}' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–∞–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö.")

if __name__ == '__main__':
    try:
        manual_input_loop()
    except KeyboardInterrupt:
        print("\nüö® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
