import os
import torch
import yaml
import logging
import pickle
from agent import Agent

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(message)s')
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open('config.yaml', 'r', encoding='utf-8') as f:
    config = yaml.safe_load(f)

# –ü—É—Ç–∏ –∫ –¥–∞–Ω–Ω—ã–º –∏ –º–æ–¥–µ–ª–∏
MODEL_PATH = config['general']['save_model_path']
TRAINING_DATA_PATH = config['paths']['training_data']

COLOR_MAP = {'–∑–µ–ª–µ–Ω—ã–π': 0, '—Å–∏–Ω–∏–π': 1, '–∑–æ–ª–æ—Ç–æ–π': 2}
REVERSE_COLOR_MAP = {v: k for k, v in COLOR_MAP.items()}

def predict_color():
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–æ–¥–µ–ª—å –∏ –¥–µ–ª–∞–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.
    """
    if not torch.cuda.is_available():
        logger.info("‚ö†Ô∏è CUDA –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU.")
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–∏
    if not os.path.exists(MODEL_PATH):
        logger.error("–ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ.")
        print("‚ùå –û—à–∏–±–∫–∞: –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ.")
        return

    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
    logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏...")
    agent = Agent(state_dim=1, action_dim=3)
    agent.load_model(MODEL_PATH)

    print("\nüîµüü¢üü° –†–µ–∂–∏–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")
    print("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤ –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è. –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 'exit'.\n")

    while True:
        user_input = input("–í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–≤–µ—Ç–æ–≤ (—á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª): ").strip().lower()

        if user_input == 'exit':
            print("üö™ –í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è.")
            break

        try:
            sequence = user_input.split()
            encoded_sequence = [COLOR_MAP[color] for color in sequence if color in COLOR_MAP]

            if not encoded_sequence:
                print("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ —Ü–≤–µ—Ç–æ–≤: '–∑–µ–ª–µ–Ω—ã–π', '—Å–∏–Ω–∏–π', '–∑–æ–ª–æ—Ç–æ–π'.")
                continue

            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ü–≤–µ—Ç–∞
            state = torch.FloatTensor(encoded_sequence[-1:]).unsqueeze(0).to(device)
            action = agent.select_action(state.tolist())
            predicted_color = REVERSE_COLOR_MAP[action]

            print(f"üîÆ –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π —Ü–≤–µ—Ç: {predicted_color}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è: {e}")
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    try:
        predict_color()
    except KeyboardInterrupt:
        print("\nüö® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
